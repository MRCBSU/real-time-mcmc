##### PARAMETER LIST - IF ANY OF THE FOLLOWING ARE NOT SPECIFIED, THE GIVEN VALUE WILL BE ASSIGNED AS A TIME- AND AGE-INVARIANT DEFAULT VALUE.

#### AVERAGE LATENT PERIOD = 2.0 days
#### AVERAGE INFECTIOUS PERIOD = 2.75 days
#### PROPORTION SYMPTOMATIC = 
#### CONTACT MATRIX MULTIPLIERS
#### AMPLITUDE OF SEASONAL VARIATION IN R_0, k_A
#### EXPONENTIAL GROWTH RATE
#### LOG(P LAMBDA_0)
#### PROPORTION OF POPULATION SUSCEPTIBLE
#### CASE-G.P. CONSULTATION RATIO
#### CASE-HOSPITALISATION RATIO
#### CASE-FATALITY RATIO
#### BACKGROUND G.P. CONSULTATION PARAMETERS
#### TEST SENSITIVITY
#### TEST SPECIFICITY
#### EXPONENTIAL GROWTH RATE HYPERPARAMETERS
#### LOG(P LAMBDA_0) HYPERPARAMETERS
#### PROPORTION OF POPULATION SUSCEPTIBLE HYPERPARAMETERS

#### DISTRIBUTION CODES
### 1. FIXED VALUE
### 2. GAMMA DISTRIBUTION - shape and rate parameterisation
### 3. BETA DISTRIBUTION
### 4. NORMAL DISTRIBUTION

#### LINK FUNCTIONS
### 0. IDENTITY (default)
### 1. LOG
### 2. LOGIT

#### BREAKPOINTS FOR TIME, AGE AND REGION
### BY DEFAULT, THESE ARE SET TO BE FALSE
### IF TRUE THERE IS FULL VARIATION OVER THE INDEX
### IF A VECTOR IS SPECIFIED THEN THESE ARE THE INDICES AT WHICH CHANGES IN THE PARAMETER OCCUR

#### REGRESSION PARAMETERS
### ANY PARAMETER FOR WHICH THE design_matrix IS SET CORRESPONDS TO REGRESSION COEFFICIENTS
### THIS CODE WAS INTENDED FOR THE prop_case_to_GP_consultation_params AND background_GP_params
### THIS THEN REQUIRES THE LINK FUNCTION TO BE SPECIFIED (IF NOT, THE IDENTITY LINK IS ASSUMED). IF THE RESPONSE VARIABLE IS p
### p IS ALLOWED TO VARY OVER INDICES r, t, a (region, time, age) WHERE REGION, TIME AND AGE ARE DISTINCT REGION, TIME AND AGE GROUPS (RATHER THAN num.region * num.days * num.ages)
### time.breakpoints AND age.breakpoints NEED TO BE SET TO DEFINE THE ABOVE.

### DEFAULT EXAMPLE. TEMPORAL BREAKPOINTS AT DAYS 83, 130, 178
### AGE BREAKPOINTS AT AGE GROUP 3 (IN OTHER WORDS, THERE WILL BE ONE VALUE FOR THE FIRST THREE AGE GROUPS AND ANOTHER FOR THE REST)
### NOTE FULL REGIONAL VARIATION
### time.breakpoints = 83, 130, 178
### age.breakpoints = 3,
### regression.link = 2,
### regression.design = design.matrix.filename  ### PUT INTO A FILE AS WILL BE POTENTIALLY HUGE.

### where lm.y3.mat is the matrix copied from the following R code which requires some dummy data y (a vector of length 32, in this case)
### num_regions <- 4
### age <- as.factor(1:2);time <- as.factor(1:4);region <- as.factor(1:num_regions);
### X <- expand.grid(age, time, region)
### X <- cbind(runif(nrow(X)), X)
### names(X)[2:4] <- c("age", "time", "region")
### lm.y3 <- lm(y ~ 0 + age:time:region, data = X, model = T)
### lm.y3.mat <- t(model.matrix(lm.y3))
### attributes(lm.y3.mat) <- NULL
### write(lm.y3.mat, "p_GP_design.txt", ncolumns = length(lm.y3.mat))


negbin_overdispersion = { param_value = 4.76823065371442, 15.9760825182878, 7.3657102514414, 6.47880236067877e-17, 4.19009331688184, 11.8645651483214, 5.11567120337594, 0.00149210574521555;
		      	  prior_distribution = 2, 2, 2, 2, 2, 2, 2, 2;
			  prior_parameters = 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01;
			  proposal_variance = 7.9e-03, 6.0e-03, 4.5e-02, 4.5e-02, 4.2e-03, 3.5e-03, 2.1e-02, 2.1e-02;
			  time_breakpoints = 83;
			  age_breakpoints = 6, 12, 18;
			} 

latent_period = { param_value = 0.0;
	      	  prior_distribution = 1;
		}

relative_infectiousness = { param_value = 1.0;
			    prior_distribution = 1;
			  }

importation_rates = { param_value = 0.0;
		      prior_distribution = 1;
		    }

average_infectious_period = { param_value = 1.35346042267399;
			      prior_distribution = 2;
			      prior_parameters = 517.6839, 357.0234;
			      proposal_variance = 0.01542;
			    }

prop_symptomatic = { param_value = 0.159207480240854;
		     prior_distribution = 3;
		     prior_parameters = 32.5, 18.5;
		     proposal_variance = 9.91e-04;
		   }

contact_parameters = { param_value = 1, 0.674814411610912, 0.597900659260359, 0.0104044081226696, 0.450813002798023, 0.522618536041786;
    0.895821947300877, 0.315067869383252;
		       prior_distribution = 1, 3, 3, 3, 3, 3;
		       prior_parameters = 1, 1, 1, 1, 1, 1, 1, 1, 1, 1;
		       proposal_variance = 0, 3.6e-05, 2.5e-03, 4.6e-03, 4.6e-04, 2.4e-03;
		     } ### ANY REGIONAL OR TEMPORAL OR AGE DEPENDENCE IS SPECIFIED ELSEWHERE FOR THIS PARAMETER

R0_amplitude_kA = { param_value = 0.0;
		    prior_distribution = 1;
		  }


R0_seasonal_peakday = { param_value = 355;
		      	prior_distribution = 1;
}

exponential_growth_rate = { param_value = 0.138923278465324;  ## only regional variance is accepted for this parameter. Any specified age or time dependence will be quietly ignored at best and may cause problems.
			    prior_distribution = 2;
			    prior_hyper = 0;
			    prior_parameters = 6.31775, 56.61066;  ## if the parameter is to have a second-stage prior, simply put the name of the parameter consituting the hyperparameters of this second-stage prior
			    proposal_variance = 6e-06;
			  }

log_p_lambda_0 = { param_value = -14.7654619153245;  ## only regional variance is accepted for this parameter. Any specified age or time dependence will be quietly ignored at best an my cause problems.
	       	   prior_distribution = 4;
		   prior_parameters = -19.1495, 4.05411;
		   proposal_variance = 7.85e-04;
		   prior_hyper = 0;
		 }

prop_susceptible = { param_value = 1.0, 0.980, 0.969, 0.845, 0.845, 0.92, 0.92, 0.865, 0.865, 0.762, 0.762, 1.0, 0.980, 0.969, 0.845, 0.845, 0.92, 0.92, 0.865, 0.865, 0.762, 0.762, 1.0, 0.980, 0.969, 0.845, 0.845, 0.92, 0.92, 0.865, 0.865, 0.762, 0.762, 1.0, 0.980, 0.969, 0.845, 0.845, 0.92, 0.92, 0.865, 0.865, 0.762, 0.762;
		     prior_distributions = 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1;
		     age_breakpoints = true;
		   }

prop_HI_32_to_HI_8 = {	param_value = 1.0;
		     	prior_distributions = 1;
		     }

prop_case_to_GP_consultation_params = { param_value = -1.11860773566101, -2.33756969660606, -1.84472215175801, -1.44165493920511, -1.70455338920228, -1.5841951965224, -2.60641513524173, -2.64787807426781, -1.8060158302249, -0.329729461130039, -1.58768696791749, -1.59421635384726, -1.22352187552162, 1.17672796208286, -0.646267362102173, 0.209004102418353, -2.11155953065944, -0.326400842190328, -0.728049520753027, -1.31196477459023, -1.40157281191287, -1.07942287855472, 0.299853623991588, 0.142034700988756, -1.09181835776676, 0.0526629041443367, -1.06710506847873, -1.39079060966242, -2.30716790548899, -2.54101696865157, -0.0674621329128893, -0.430109374795716;
                                        prior_distributions = 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4;
                                        prior_parameters = -0.1870785, 0.4074365, -0.1870785, 0.4074365, -0.1870785, 0.4074365, -0.1870785, 0.4074365, -0.1870785, 0.4074365, -0.1870785, 0.4074365, -0.1870785, 0.4074365, -0.1870785, 0.4074365, 0.4258796, 0.9640366, 0.4258796, 0.9640366, 0.4258796, 0.9640366, 0.4258796, 0.9640366, 0.4258796, 0.9640366, 0.4258796, 0.9640366, 0.4258796, 0.9640366, 0.4258796, 0.9640366, -0.3186211, 0.5126546, -0.3186211, 0.5126546, -0.3186211, 0.5126546, -0.3186211, 0.5126546, -0.3186211, 0.5126546, -0.3186211, 0.5126546, -0.3186211, 0.5126546, -0.3186211, 0.5126546, -0.2840577, 0.5134608, -0.2840577, 0.5134608, -0.2840577, 0.5134608, -0.2840577, 0.5134608, -0.2840577, 0.5134608, -0.2840577, 0.5134608, -0.2840577, 0.5134608, -0.2840577, 0.5134608;
                                        proposal_variance = 0.000028, 0.000153, 0.000593, 0.000288, 0.000132, 0.000199, 0.000174, 0.000119, 0.001295, 0.001667, 0.021263, 0.002231, 0.002678, 0.000427, 0.139804, 0.001616, 0.003916, 0.005180, 0.011299, 0.016632, 0.000742, 0.000816, 0.007595, 0.003686, 0.000711, 0.001233, 0.004032, 0.002368, 0.001114, 0.001707, 0.001395, 0.001452;
					time_breakpoints = 83, 130, 178;
                                        age_breakpoints = 3, 11, 14, 22, 25, 33, 36;
                                        regression_link = 2;
                                      }

prop_case_to_hosp = { param_value = 0.210463210726505, 0.943339865400187, 0.17255822696862, 0.109638146520929;
		      prior_distributions = 3, 3, 3, 3;
		      prior_parameters = 1.0289, 2.6922, 1.0289, 2.6922, 1.0289, 2.6922, 1.0289, 2.6922;
		      proposal_variance = 1.66e-02, 1.66e-02, 1.66e-02, 1.66e-02;
		      age_breakpoints = 11, 22, 33;
		    }

prop_case_to_death = { param_value = 0.01;
		       prior_distributions = 1;
		     }

### BACKGROUND SET-UP
### DESIGN
library(Matrix)
overparameterised.fixed.effects.sd <- log(26 * 100000) / 3
time1 <- 6; time2 <- 11
nage <- 6
nreg <- 3
fn_centering_param_subblock <- function(dim_t)
 {
   A <- matrix(-1 / dim_t, dim_t, dim_t)
   diag(A) <- diag(A) + 1
   A
 }
fn_centering_param_main_firstorder_submatrix <- function(dim_1, dim_2, idx = 1)
{
  dim_rows <- ifelse(idx == 1, dim_1, ifelse(idx == 2, dim_2, NA))
  dim_cols <- ifelse(dim_rows == dim_1, dim_2, dim_1)
  A <- array(-1 / (dim_1 * dim_2), dim = c(dim_rows, dim_1, dim_2))
  A <- array(apply(A, 4 - idx, function(x) x + ((1 / dim_cols) * diag(dim_rows))), dim = c(dim_rows, dim_rows, dim_cols))
  A <- aperm(A, c(1, 4 - idx, 1 + idx))
  matrix(A, dim_rows, dim_rows * dim_cols)
}
fn_centering_param_firstorder_submatrix <- function(dim_1, dim_2)
{
  A <- fn_centering_param_subblock(dim_1 * dim_2)
  A <- A - fn_centering_param_main_firstorder_submatrix(dim_1, dim_2, 1)[as.numeric(gl(dim_1, dim_2)), ]
  A <- A - fn_centering_param_main_firstorder_submatrix(dim_1, dim_2, 2)[rep(1:dim_2, dim_1), ]
}
fn_centering_param.pre <- function(dim_r, dim_t, dim_a)
 {
   A <- matrix(0, (dim_r * dim_t) + (dim_r * dim_a) + dim_r + dim_t + dim_a + 1, (dim_r * dim_t) + (dim_r * dim_a) + dim_r + dim_t + dim_a)
   A[1, ] <- c(rep(1, dim_a) / dim_a, rep(1, dim_t) / dim_t, rep(1, dim_r) / dim_r, rep(1, dim_r * dim_t) / (dim_r * dim_t), rep(1, dim_r * dim_a) / (dim_r * dim_a))
   A.sub.r <- fn_centering_param_subblock(dim_r)
   A.sub.t <- fn_centering_param_subblock(dim_t)
   A.sub.a <- fn_centering_param_subblock(dim_a)
   A.sub.r.dt <- fn_centering_param_main_firstorder_submatrix(dim_r, dim_t, 1)
   A.sub.r.da <- fn_centering_param_main_firstorder_submatrix(dim_r, dim_a, 1)
   A.sub.t.dr <- fn_centering_param_main_firstorder_submatrix(dim_r, dim_t, 2)
   A.sub.a.dr <- fn_centering_param_main_firstorder_submatrix(dim_r, dim_a, 2)
   A.sub.dr.dt <- fn_centering_param_firstorder_submatrix(dim_r, dim_t)
   A.sub.dr.da <- fn_centering_param_firstorder_submatrix(dim_r, dim_a)
   idx <- cumsum(c(dim_a, dim_t, dim_r, dim_r * dim_t, dim_r * dim_a))
   A[2:(1 + idx[1]), 1:idx[1]] <- A.sub.a
   A[(2 + idx[1]):(1 + idx[2]), (1 + idx[1]):idx[2]] <- A.sub.t
   A[(2 + idx[2]):(1 + idx[3]), (1 + idx[2]):idx[3]] <- A.sub.r
   A[2:(1 + idx[1]), (1 + idx[4]):idx[5]] <- A.sub.a.dr
   A[(2 + idx[1]):(1 + idx[2]), (1 + idx[3]):idx[4]] <- A.sub.t.dr
   A[(2 + idx[2]):(1 + idx[3]), (1 + idx[3]):idx[4]] <- A.sub.r.dt
   A[(2 + idx[2]):(1 + idx[3]), (1 + idx[4]):idx[5]] <- A.sub.r.da
   A[(2 + idx[3]):(1 + idx[4]), (1 + idx[3]):idx[4]] <- A.sub.dr.dt
   A[(2 + idx[4]):(1 + idx[5]), (1 + idx[4]):idx[5]] <- A.sub.dr.da
   ## rows to remove
   rr <- 1 + idx[1:3]
   r1 <- expand.grid(1:dim_t, 1:dim_r)
   rr1 <- r1$Var1 == max(r1$Var1) | r1$Var2 == max(r1$Var2)
   r2 <- expand.grid(1:dim_a, 1:dim_r)
   rr2 <- r2$Var1 == max(r2$Var1) | r2$Var2 == max(r2$Var2)
   rr <- c(rr, ((2 + idx[3]):(1 + idx[4]))[rr1], ((2 + idx[4]):(1 + idx[5]))[rr2])
   A[-rr, ]
 }
fn_centering_param.post <- function(dim_r, dim_t, dim_a)
 {
   A <- matrix(0, (dim_r * dim_a) + dim_r + dim_t + dim_a + 1, (dim_r * dim_a) + dim_r + dim_t + dim_a)
   A[1, ] <- c(rep(1, dim_a) / dim_a, rep(1, dim_t) / dim_t, rep(1, dim_r) / dim_r, rep(1, dim_r * dim_a) / (dim_r * dim_a))
   A.sub.r <- fn_centering_param_subblock(dim_r)
   A.sub.t <- fn_centering_param_subblock(dim_t)
   A.sub.a <- fn_centering_param_subblock(dim_a)
   A.sub.r.da <- fn_centering_param_main_firstorder_submatrix(dim_r, dim_a, 1)
   A.sub.a.dr <- fn_centering_param_main_firstorder_submatrix(dim_r, dim_a, 2)
   A.sub.dr.da <- fn_centering_param_firstorder_submatrix(dim_r, dim_a)
   idx <- cumsum(c(dim_a, dim_t, dim_r, dim_r * dim_a))
   A[2:(1 + idx[1]), 1:idx[1]] <- A.sub.a
   A[(2 + idx[1]):(1 + idx[2]), (1 + idx[1]):idx[2]] <- A.sub.t
   A[(2 + idx[2]):(1 + idx[3]), (1 + idx[2]):idx[3]] <- A.sub.r
   A[2:(1 + idx[1]), (1 + idx[3]):idx[4]] <- A.sub.a.dr
   A[(2 + idx[2]):(1 + idx[3]), (1 + idx[3]):idx[4]] <- A.sub.r.da
   A[(2 + idx[3]):(1 + idx[4]), (1 + idx[3]):idx[4]] <- A.sub.dr.da
   ## rows to remove
   rr <- 1 + idx[1:3]
   r2 <- expand.grid(1:dim_a, 1:dim_r)
   rr2 <- r2$Var1 == max(r2$Var1) | r2$Var2 == max(r2$Var2)
   rr <- c(rr, ((2 + idx[3]):(1 + idx[4]))[rr2])
   A[-rr, ]
 }
fn_centering_param <- function(dim_r, dim_t, dim_a)
 {
   A <- matrix(0, dim_r + dim_t + dim_a + 1, dim_r + dim_t + dim_a)
   A[1, ] <- c(rep(1, dim_r) / dim_r, rep(1, dim_t) / dim_t, rep(1, dim_a) / dim_a)
   A.sub.r <- fn_centering_param_subblock(dim_r)
   A.sub.t <- fn_centering_param_subblock(dim_t)
   A.sub.a <- fn_centering_param_subblock(dim_a)
   idx <- cumsum(c(dim_r, dim_t, dim_a))
   A[2:(1 + idx[1]), 1:idx[1]] <- A.sub.r
   A[(2 + idx[1]):(1 + idx[2]), (1 + idx[1]):idx[2]] <- A.sub.t
   A[(2 + idx[2]):(1 + idx[3]), (1 + idx[2]):idx[3]] <- A.sub.a
   A[-(1 + idx), ]
 }
## pre-NPFS
A.preNPFS <- fn_centering_param.pre(nreg, time1, nage)
D.pre <- diag(ncol(A.preNPFS));diag(D.pre) <- overparameterised.fixed.effects.sd^2
pre.NPFS.effects.covar <- zapsmall(A.preNPFS %*% D.pre %*% t(A.preNPFS))
## post-NPFS
A.postNPFS <- fn_centering_param.post(nreg, time2, nage)
D.post <- diag(ncol(A.postNPFS));diag(D.post) <- overparameterised.fixed.effects.sd^2
post.NPFS.effects.covar <- zapsmall(A.postNPFS %*% D.post %*% t(A.postNPFS))

bg.prior <- bdiag(list(pre.NPFS.effects.covar, post.NPFS.effects.covar))
bg.prior <- matrix(as.numeric(bg.prior), nrow(bg.prior), ncol(bg.prior))
bg.prior <- cbind(0, bg.prior)
parse(text = t(bg.prior)) ### THIS IS WHAT IS INCLUDED AS THE PRIOR PARAMETERS VECTOR BELOW

## BACKGROUND DESIGN
reg <- 1:4; time <- 1:17; age <- 1:7; NPFS <- 6
X <- expand.grid(age, reg, time)
names(X) <- c("age", "reg", "time")
X$reg[X$reg == 4] <- 3 ## Equivalence of the North and South backgrounds
X$age[X$age == 2] <- 1 ## Equivalence of the background consultation rates in the <4 age group
X.preNPFS <- X[X$time <= NPFS, ]
X.postNPFS <- X[X$time > NPFS, ]
X$age <- factor(X$age); X$time <- factor(X$time); X$reg <- factor(X$reg)
X.preNPFS$age <- factor(X.preNPFS$age); X.preNPFS$time <- factor(X.preNPFS$time); X.preNPFS$reg <- factor(X.preNPFS$reg)
X.postNPFS$age <- factor(X.postNPFS$age); X.postNPFS$time <- factor(X.postNPFS$time); X.postNPFS$reg <- factor(X.postNPFS$reg)
lm.y3.mat <- model.matrix(~ age + time + reg + (time:reg) + (age:reg), X.preNPFS, contrasts = list(reg = "contr.sum", time = "contr.sum", age = "contr.sum"))## pre.NPFS regression
lm.y4.mat <- model.matrix(~ age + time + reg + (age:reg), X.postNPFS, contrasts = list(reg = "contr.sum", time = "contr.sum", age = "contr.sum"))## post.NPFS regression
lm.design <- bdiag(list(lm.y3.mat, lm.y4.mat))
lm.design <- matrix(as.numeric(lm.design), nrow(lm.design), ncol(lm.design))
write(t(lm.design), "bg_design.txt", sep = " ", ncolumns = length(lm.design))

background_GP_params = { param_value = 6.1127660878133, 0.522685323197655, 0.263788770770807, 0.40105953676268, 0.165165232322823, -0.338043666423036, -0.502990438813943, -0.8487875035022, -0.923574177745152, -0.350849006975706, 0.55488151917318, 0.166177607102813, 0.136934503261291, 0.0857041117098392, 0.0861133757925131, -0.16595560695646, 0.00262696668332358, 0.02514165697877, -0.226635310831021, -0.160273751933119, 0.0968825418596108, 0.31953838050978, 0.355731997541892, -0.312712517698153, 0.0597647341732339, 0.148158681599603, -0.0560927814300952, 0.177164368742403, 0.268173997281018, -0.00868975432645831, -0.227511511696678, -0.0645107159482892, -0.179639927090202, 6.42576106407787, 0.77720201347606, -0.193262259604492, 0.115666094392699, -0.0126594312947666, -0.151643797462555, 0.730593644813961, -0.288763421128532, -0.71800523554363, -0.514338324823366, -0.297713062319331, 0.0634747211952999, 0.177353937201659, 0.408807050496218, 0.398816908979448, 0.214579310394041, 0.0782570892815233, 0.109599725306778, 0.0063103118936578, 0.0204116044807739, -0.0127795296040104, -0.146356586131527, 0.0363091162682266, 0.0307249724909113, -0.0927124185067838, -0.0954520470957207, 0.0134066751471999, -0.0785510623913451;
		       	 prior_distributions = 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5;
			 prior_parameters = 0, 18.855329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26.936184, -5.387237, -5.387237, -5.387237, -5.387237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.387237, 26.936184, -5.387237, -5.387237, -5.387237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.387237, -5.387237, 26.936184, -5.387237, -5.387237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.387237, -5.387237, -5.387237, 26.936184, -5.387237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.387237, -5.387237, -5.387237, -5.387237, 26.936184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26.936184, -5.387237, -5.387237, -5.387237, -5.387237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.387237, 26.936184, -5.387237, -5.387237, -5.387237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.387237, -5.387237, 26.936184, -5.387237, -5.387237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.387237, -5.387237, -5.387237, 26.936184, -5.387237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.387237, -5.387237, -5.387237, -5.387237, 26.936184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21.548947, -10.774474, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10.774474, 21.548947, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13.468092, -2.693618, -2.693618, -2.693618, -2.693618, -6.734046, 1.346809, 1.346809, 1.346809, 1.346809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.693618, 13.468092, -2.693618, -2.693618, -2.693618, 1.346809, -6.734046, 1.346809, 1.346809, 1.346809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.693618, -2.693618, 13.468092, -2.693618, -2.693618, 1.346809, 1.346809, -6.734046, 1.346809, 1.346809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.693618, -2.693618, -2.693618, 13.468092, -2.693618, 1.346809, 1.346809, 1.346809, -6.734046, 1.346809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.693618, -2.693618, -2.693618, -2.693618, 13.468092, 1.346809, 1.346809, 1.346809, 1.346809, -6.734046, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.734046, 1.346809, 1.346809, 1.346809, 1.346809, 13.468092, -2.693618, -2.693618, -2.693618, -2.693618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.346809, -6.734046, 1.346809, 1.346809, 1.346809, -2.693618, 13.468092, -2.693618, -2.693618, -2.693618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.346809, 1.346809, -6.734046, 1.346809, 1.346809, -2.693618, -2.693618, 13.468092, -2.693618, -2.693618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.346809, 1.346809, 1.346809, -6.734046, 1.346809, -2.693618, -2.693618, -2.693618, 13.468092, -2.693618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.346809, 1.346809, 1.346809, 1.346809, -6.734046, -2.693618, -2.693618, -2.693618, -2.693618, 13.468092, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13.468092, -2.693618, -2.693618, -2.693618, -2.693618, -6.734046, 1.346809, 1.346809, 1.346809, 1.346809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.693618, 13.468092, -2.693618, -2.693618, -2.693618, 1.346809, -6.734046, 1.346809, 1.346809, 1.346809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.693618, -2.693618, 13.468092, -2.693618, -2.693618, 1.346809, 1.346809, -6.734046, 1.346809, 1.346809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.693618, -2.693618, -2.693618, 13.468092, -2.693618, 1.346809, 1.346809, 1.346809, -6.734046, 1.346809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.693618, -2.693618, -2.693618, -2.693618, 13.468092, 1.346809, 1.346809, 1.346809, 1.346809, -6.734046, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.734046, 1.346809, 1.346809, 1.346809, 1.346809, 13.468092, -2.693618, -2.693618, -2.693618, -2.693618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.346809, -6.734046, 1.346809, 1.346809, 1.346809, -2.693618, 13.468092, -2.693618, -2.693618, -2.693618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.346809, 1.346809, -6.734046, 1.346809, 1.346809, -2.693618, -2.693618, 13.468092, -2.693618, -2.693618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.346809, 1.346809, 1.346809, -6.734046, 1.346809, -2.693618, -2.693618, -2.693618, 13.468092, -2.693618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.346809, 1.346809, 1.346809, 1.346809, -6.734046, -2.693618, -2.693618, -2.693618, -2.693618, 13.468092, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15.671962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26.936184, -5.387237, -5.387237, -5.387237, -5.387237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.387237, 26.936184, -5.387237, -5.387237, -5.387237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.387237, -5.387237, 26.936184, -5.387237, -5.387237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.387237, -5.387237, -5.387237, 26.936184, -5.387237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.387237, -5.387237, -5.387237, -5.387237, 26.936184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22.038696, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.20387, 22.038696, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.20387, -2.20387, 22.038696, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.20387, -2.20387, -2.20387, 22.038696, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.20387, -2.20387, -2.20387, -2.20387, 22.038696, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, 22.038696, -2.20387, -2.20387, -2.20387, -2.20387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, 22.038696, -2.20387, -2.20387, -2.20387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, 22.038696, -2.20387, -2.20387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, 22.038696, -2.20387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, -2.20387, 22.038696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.855329, -9.427664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9.427664, 18.855329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13.468092, -2.693618, -2.693618, -2.693618, -2.693618, -6.734046, 1.346809, 1.346809, 1.346809, 1.346809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.693618, 13.468092, -2.693618, -2.693618, -2.693618, 1.346809, -6.734046, 1.346809, 1.346809, 1.346809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.693618, -2.693618, 13.468092, -2.693618, -2.693618, 1.346809, 1.346809, -6.734046, 1.346809, 1.346809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.693618, -2.693618, -2.693618, 13.468092, -2.693618, 1.346809, 1.346809, 1.346809, -6.734046, 1.346809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.693618, -2.693618, -2.693618, -2.693618, 13.468092, 1.346809, 1.346809, 1.346809, 1.346809, -6.734046, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.734046, 1.346809, 1.346809, 1.346809, 1.346809, 13.468092, -2.693618, -2.693618, -2.693618, -2.693618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.346809, -6.734046, 1.346809, 1.346809, 1.346809, -2.693618, 13.468092, -2.693618, -2.693618, -2.693618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.346809, 1.346809, -6.734046, 1.346809, 1.346809, -2.693618, -2.693618, 13.468092, -2.693618, -2.693618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.346809, 1.346809, 1.346809, -6.734046, 1.346809, -2.693618, -2.693618, -2.693618, 13.468092, -2.693618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.346809, 1.346809, 1.346809, 1.346809, -6.734046, -2.693618, -2.693618, -2.693618, -2.693618, 13.468092;
			 proposal_variance = 0.000030, 0.000173, 0.000303, 0.000070, 0.000058, 0.000085, 0.000042, 0.000021, 0.000053, 0.000039, 0.000039, 0.000034, 0.000038, 0.000027, 0.000049, 0.000053, 0.000041, 0.000034, 0.000071, 0.000060, 0.000030, 0.000032, 0.000049, 0.000156, 0.000313, 0.000140, 0.000068, 0.000156, 0.000216, 0.000263, 0.000121, 0.000081, 0.000156, 0.000011, 0.000068, 0.000082, 0.000051, 0.000038, 0.000038, 0.000084, 0.000090, 0.000118, 0.000091, 0.000048, 0.000049, 0.000055, 0.000061, 0.000046, 0.000058, 0.000014, 0.000013, 0.000066, 0.000105, 0.000056, 0.000036, 0.000053, 0.000106, 0.000099, 0.000057, 0.000040, 0.000039;
			 time_breakpoints = 17, 31, 45, 59, 73, 83, 101, 115, 129, 143, 157, 171, 185, 199, 213, 227;
			 age_breakpoints = 1, 2, 3, 5, 7, 9, 11, 12, 13, 14, 16, 18, 20, 22, 23, 24, 25, 27, 29, 31, 33, 34, 35, 36, 38, 40, 42;
			 regression_link = 1;
			 regression_design = bg_design.txt;
		       }


## ## CREATE THE DESIGN MATRIX
## library(Matrix)
## bank.holiday.days <- c(4, 25, 123, 239:240, 242)
## DAYS <- gl(7, 1, 245, labels = c("Fr", "Sa", "Su", "Mo", "Tu", "We", "Th"))
## DAYS[bank.holiday.days] <- "Su"
## lm.mat <- model.matrix(~ DAYS, contrasts = list(DAYS = "contr.sum"))[, -1]
## write(t(lm.mat), file = "d_o_w_design_file.txt", sep = " ", ncolumns = length(lm.mat))

day_of_week_effects = { param_value = 0.959801154205037, -2.15758129298221, -3.28928710163527, 1.33085979960894, 1.15450459550735, 1.02948018360213;
		    prior_distributions = 5, 5, 5, 5, 5, 5;
		    prior_parameters = 0, 5.357143, -0.8928571, -0.8928571, -0.8928571, -0.8928571, -0.8928571, 0, -0.8928571, 5.357143, -0.8928571, -0.8928571, -0.8928571, -0.8928571, 0, -0.8928571, -0.8928571, 5.357143, -0.8928571, -0.8928571, -0.8928571, 0, -0.8928571, -0.8928571, -0.8928571, 5.357143, -0.8928571, -0.8928571, 0, -0.8928571, -0.8928571, -0.8928571, -0.8928571, 5.357143, -0.8928571, 0, -0.8928571, -0.8928571, -0.8928571, -0.8928571, -0.8928571, 5.357143;
		    proposal_variance = 2e-05, 2e-05, 2e-05, 2e-05, 2e-05, 2e-05;
		    time_breakpoints = true;
		    regression_link = 1;
		    regression_design = d_o_w_design_file.txt;
		  }

test_sensitivity = { param_value = 1;
		     prior_distributions = 1;
		   } ## CODE CURRENTLY IGNORES ANY VARIATION

test_specificity = { param_value = 1;
		     prior_distributions = 1;
		   } ## CODE CURRENTLY IGNORES ANY VARIATION

exponential_growth_rate_hyper = { param_value = 6.3, 57;
			      	  prior_distribution = 1, 1;
				}

l_p_lambda_0_hyper = { param_value = -19.1495, 4.05411;
		       prior_distribution = 1, 1;
		     }

prop_susceptible_hyper = { param_value = 0, 0, 0, 0, 0, 0, 0;
		       	   prior_distribution = 1, 1, 1, 1, 1, 1, 1;
			 }


##### PARAMETERS OF THE VARIOUS DELAY DISTRIBUTIONS. NEED TO SPECIFY
##### THE MEAN AND VARIANCES OF THE GAMMA DISTRIBUTED DELAY TIMES

incubation_distribution = { gamma_mean = 1.620;
			    gamma_sd = 1.791;
			  }

symp_to_gp_distribution = { gamma_mean = 1.968;
			    gamma_sd = 1.199;
			  }

symp_to_hosp_distribution = { gamma_mean = 0.0;
			      gamma_sd = 0.0;
			    }

symp_to_death_distribution = { gamma_mean = 10.75;
			       gamma_sd = 8.336;
			     }

gp_reporting_distribution = { gamma_mean = 0.5;
			       gamma_sd = 0.5;
			     }

hosp_reporting_distribution = { gamma_mean = 6.577;
			      	gamma_sd = 3.722;
			      }

death_reporting_distribution = { gamma_mean = 75.89;
			       	 gamma_sd = 133.8;
			       }
